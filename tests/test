// Using strings
char *s1, *s2, *s3, *s4, *s5;
s1 = "Hello";
s2 = "World";
s3 = "Dogs";
s4 = "Tacos";
s5 = "Zebra";

SLInsert(sl, s1); // => ['HELLO']
printListString(sl);
SLInsert(sl, s2); // => ['WORLD', 'HELLO']
printListString(sl);
SLInsert(sl, s3); // => ['WORLD', 'HELLO', 'DOGS']
printListString(sl);
SLInsert(sl, s4); // => ['WORLD', 'HELLO', 'DOGS']
printListString(sl);
SLInsert(sl, s5); // => ['Zebra', 'WORLD', 'HELLO', 'DOGS']
printListString(sl);
SLRemove(sl, s2); // => ['Zebra', 'HELLO', 'DOGS']
printListString(sl);

slip = SLCreateIterator(sl);

printf("------------------------------\n");

printf("%s\n", (char*)SLNextItem(slip)); // => Zebra 
SLRemove(sl, s1);
printf("%s\n", (char*)SLNextItem(slip)); // => Tacos 
printf("%s\n", (char*)SLNextItem(slip)); // => Dogs

SLDestroyIterator(slip);
SLDestroy(sl);


// Using ints
int s1, s2, s3, s4, s5;
s1 = 1;
s2 = 2;
s3 = 3;
s4 = 4;
s5 = 5;

SLInsert(sl, &s4); // => [4]
SLInsert(sl, &s3); // => [4, 3]
SLInsert(sl, &s5); // => [5, 4, 3]
SLInsert(sl, &s2); // => [5, 4, 3, 2]
SLInsert(sl, &s1); // => [5, 4, 3, 2, 1]
SLRemove(sl, &s4); // => [5, 3, 2, 1]

slip = SLCreateIterator(sl);

printf("------------------------------\n");

printf("%i\n", *(int*)SLNextItem(slip)); // => 5 
SLRemove(sl, s1);
printf("%i\n", *(int*)SLNextItem(slip)); // => 3
printf("%i\n", *(int*)SLNextItem(slip)); // 2

SLDestroyIterator(slip);
SLDestroy(sl);

// Special case with removing iter
List[7, 5, 3]
SLNextItem(sl); // => 7
SLRemove(sl, &i5);
SLNextItem(sl); // => 3

// Special case with removing iter
List[7, 5, 3]
SLNextItem(sl); // => 7
SLRemove(sl, &i5);
SLInsert(sl, &i4);
SLNextItem(sl); // => 4
SLNextItem(sl); // => 3
